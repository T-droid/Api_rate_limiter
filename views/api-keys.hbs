<!DOCTYPE html>
<html class="dark" lang="en">
            <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
                <!-- Page Header -->
                <div class="mb-8 flex flex-col sm:flex-row sm:items-center sm:justify-between">
                    <div>
                        <h1 class="text-3xl font-bold text-gray-900 dark:text-white">API Keys</h1>
                        <p class="mt-2 text-gray-600 dark:text-gray-400">Manage your API keys and access tokens</p>
                    </div>
                    <button id="generateKeyBtn" class="mt-4 sm:mt-0 flex items-center gap-2 bg-primary hover:bg-primary/90 text-white px-4 py-2 rounded-lg font-medium">
                        <span class="material-symbols-outlined text-lg">add</span>
                        Generate New Key
                    </button>
                </div>  <meta charset="utf-8"/>
    <meta content="width=device-width, initial-scale=1.0" name="viewport"/>
    <title>API Keys - API Rate Limiter</title>
    <link href="https://fonts.googleapis.com" rel="preconnect"/>
    <link crossorigin="" href="https://fonts.gstatic.com" rel="preconnect"/>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700&display=swap" rel="stylesheet"/>
    <link href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined" rel="stylesheet"/>
    <script src="https://cdn.tailwindcss.com?plugins=forms,container-queries"></script>
    <script>
        tailwind.config = {
            darkMode: "class",
            theme: {
                extend: {
                    colors: {
                        primary: "#0c5fe4",
                        "background-light": "#f5f7f8",
                        "background-dark": "#101722",
                    },
                    fontFamily: {
                        display: ["Inter"],
                    },
                    borderRadius: {
                        DEFAULT: "0.25rem",
                        lg: "0.5rem",
                        xl: "0.75rem",
                        full: "9999px",
                    },
                },
            },
        };
    </script>
    <style>
        .material-symbols-outlined {
            font-variation-settings: "FILL" 1, "wght" 400, "GRAD" 0, "opsz" 24;
        }
        body {
            min-height: max(884px, 100dvh);
        }
    </style>
</head>
<body class="bg-background-light dark:bg-background-dark font-display text-slate-800 dark:text-slate-200">
    <div class="flex flex-col min-h-screen">
        {{> header}}
        <main class="flex-grow">
            <h1 class="text-lg font-bold text-slate-900 dark:text-white">API Keys</h1>
            <button id="generateKeyBtn" class="flex h-10 w-10 items-center justify-center rounded-full text-primary hover:bg-primary/10">
                <span class="material-symbols-outlined text-2xl">add</span>
            </button>
        </header>

        <!-- Main Content -->
        <main class="flex-1 p-4">
            <!-- Alert Container -->
            <div id="alertContainer" class="hidden rounded-lg p-4 mb-4">
                <div class="flex">
                    <div class="flex-shrink-0">
                        <span id="alertIcon" class="material-symbols-outlined text-lg"></span>
                    </div>
                    <div class="ml-3">
                        <p id="alertMessage" class="text-sm font-medium"></p>
                    </div>
                </div>
            </div>

            <!-- API Keys List -->
            <div id="apiKeysList" class="space-y-4">
                <!-- Loading skeleton -->
                <div id="loadingSkeleton" class="space-y-4">
                    <div class="animate-pulse rounded-xl border border-slate-200 bg-white p-4 dark:border-slate-800 dark:bg-slate-900/50">
                        <div class="h-4 bg-slate-200 rounded w-3/4 mb-2 dark:bg-slate-700"></div>
                        <div class="h-3 bg-slate-200 rounded w-1/2 mb-3 dark:bg-slate-700"></div>
                        <div class="flex space-x-2">
                            <div class="h-8 bg-slate-200 rounded w-16 dark:bg-slate-700"></div>
                            <div class="h-8 bg-slate-200 rounded w-16 dark:bg-slate-700"></div>
                        </div>
                    </div>
                    <div class="animate-pulse rounded-xl border border-slate-200 bg-white p-4 dark:border-slate-800 dark:bg-slate-900/50">
                        <div class="h-4 bg-slate-200 rounded w-3/4 mb-2 dark:bg-slate-700"></div>
                        <div class="h-3 bg-slate-200 rounded w-1/2 mb-3 dark:bg-slate-700"></div>
                        <div class="flex space-x-2">
                            <div class="h-8 bg-slate-200 rounded w-16 dark:bg-slate-700"></div>
                            <div class="h-8 bg-slate-200 rounded w-16 dark:bg-slate-700"></div>
                        </div>
                    </div>
                </div>

                <!-- Empty state -->
                <div id="emptyState" class="hidden text-center py-12">
                    <div class="mx-auto h-24 w-24 rounded-full bg-slate-100 dark:bg-slate-800 flex items-center justify-center mb-4">
                        <span class="material-symbols-outlined text-4xl text-slate-400">key</span>
                    </div>
                    <h3 class="text-lg font-medium text-slate-900 dark:text-white mb-2">No API Keys</h3>
                    <p class="text-slate-500 dark:text-slate-400 mb-6">Get started by creating your first API key</p>
                    <button id="createFirstKeyBtn" class="inline-flex items-center rounded-lg bg-primary px-4 py-2 text-sm font-semibold text-white hover:bg-primary/90 focus:outline-none focus:ring-2 focus:ring-primary/20">
                        <span class="material-symbols-outlined mr-2 text-lg">add</span>
                        Create API Key
                    </button>
                </div>

                <!-- API Keys will be populated here -->
                <div id="apiKeysContainer"></div>
            </div>
        </div>
        </main>
    </div>

    <!-- Generate Key Modal -->
    <div id="generateKeyModal" class="fixed inset-0 z-50 hidden overflow-y-auto">
        <div class="flex min-h-full items-end justify-center p-4 text-center sm:items-center sm:p-0">
            <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity"></div>
            <div class="relative transform overflow-hidden rounded-lg bg-white dark:bg-slate-900 px-4 pb-4 pt-5 text-left shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-lg sm:p-6">
                <div>
                    <div class="mx-auto flex h-12 w-12 items-center justify-center rounded-full bg-primary/20">
                        <span class="material-symbols-outlined text-primary">key</span>
                    </div>
                    <div class="mt-3 text-center sm:mt-5">
                        <h3 class="text-base font-semibold leading-6 text-gray-900 dark:text-white" id="modal-title">
                            Generate New API Key
                        </h3>
                        <div class="mt-2">
                            <p class="text-sm text-gray-500 dark:text-gray-400">
                                This will create a new API key for your account. Make sure to copy it as you won't be able to see it again.
                            </p>
                        </div>
                    </div>
                </div>
                <div class="mt-5 sm:mt-6 sm:grid sm:grid-flow-row-dense sm:grid-cols-2 sm:gap-3">
                    <button id="confirmGenerateBtn" type="button" class="inline-flex w-full justify-center rounded-md bg-primary px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-primary/90 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-primary sm:col-start-2">
                        <span id="generateBtnText">Generate</span>
                        <span id="generateSpinner" class="hidden ml-2">
                            <svg class="animate-spin h-4 w-4" fill="none" viewBox="0 0 24 24">
                                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                            </svg>
                        </span>
                    </button>
                    <button id="cancelGenerateBtn" type="button" class="mt-3 inline-flex w-full justify-center rounded-md bg-white px-3 py-2 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50 sm:col-start-1 sm:mt-0 dark:bg-slate-800 dark:text-white dark:ring-slate-600 dark:hover:bg-slate-700">
                        Cancel
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Key Display Modal -->
    <div id="keyDisplayModal" class="fixed inset-0 z-50 hidden overflow-y-auto">
        <div class="flex min-h-full items-end justify-center p-4 text-center sm:items-center sm:p-0">
            <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity"></div>
            <div class="relative transform overflow-hidden rounded-lg bg-white dark:bg-slate-900 px-4 pb-4 pt-5 text-left shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-lg sm:p-6">
                <div>
                    <div class="mx-auto flex h-12 w-12 items-center justify-center rounded-full bg-green-100 dark:bg-green-900/20">
                        <span class="material-symbols-outlined text-green-600 dark:text-green-400">check_circle</span>
                    </div>
                    <div class="mt-3 text-center sm:mt-5">
                        <h3 class="text-base font-semibold leading-6 text-gray-900 dark:text-white">
                            API Key Generated Successfully
                        </h3>
                        <div class="mt-4">
                            <div class="flex items-center space-x-2 rounded-lg bg-gray-50 dark:bg-slate-800 p-3">
                                <input id="generatedApiKey" type="text" readonly class="flex-1 bg-transparent text-sm font-mono text-gray-900 dark:text-white focus:outline-none" />
                                <button id="copyKeyBtn" class="flex items-center justify-center rounded-md bg-primary p-2 text-white hover:bg-primary/90">
                                    <span class="material-symbols-outlined text-lg">content_copy</span>
                                </button>
                            </div>
                            <p class="mt-2 text-xs text-red-600 dark:text-red-400 font-medium">
                                ⚠️ Make sure to copy this key now. You won't be able to see it again!
                            </p>
                        </div>
                    </div>
                </div>
                <div class="mt-5 sm:mt-6">
                    <button id="closeKeyModalBtn" type="button" class="inline-flex w-full justify-center rounded-md bg-primary px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-primary/90 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-primary">
                        Done
                    </button>
                </div>
            </div>
        </div>
    </div>

    <script>
        let apiKeys = [];
        let authToken = localStorage.getItem('authToken');

        // Show alert function
        function showAlert(type, message) {
            const alertContainer = document.getElementById('alertContainer');
            const alertIcon = document.getElementById('alertIcon');
            const alertMessage = document.getElementById('alertMessage');
            
            alertContainer.className = `rounded-lg p-4 mb-4 ${type === 'error' ? 'bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800' : type === 'success' ? 'bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800' : 'bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800'}`;
            alertIcon.textContent = type === 'error' ? 'error' : type === 'success' ? 'check_circle' : 'info';
            alertIcon.className = `material-symbols-outlined text-lg ${type === 'error' ? 'text-red-500' : type === 'success' ? 'text-green-500' : 'text-blue-500'}`;
            alertMessage.textContent = message;
            alertMessage.className = `text-sm font-medium ${type === 'error' ? 'text-red-700 dark:text-red-300' : type === 'success' ? 'text-green-700 dark:text-green-300' : 'text-blue-700 dark:text-blue-300'}`;
            
            alertContainer.classList.remove('hidden');
            
            // Auto hide after 5 seconds
            setTimeout(() => {
                alertContainer.classList.add('hidden');
            }, 5000);
        }

        // Format date
        function formatDate(dateString) {
            return new Date(dateString).toLocaleDateString('en-US', {
                year: 'numeric',
                month: 'short',
                day: 'numeric'
            });
        }

        // Render API keys
        function renderApiKeys() {
            const container = document.getElementById('apiKeysContainer');
            const emptyState = document.getElementById('emptyState');
            const loadingSkeleton = document.getElementById('loadingSkeleton');
            
            loadingSkeleton.classList.add('hidden');
            
            if (apiKeys.length === 0) {
                emptyState.classList.remove('hidden');
                container.innerHTML = '';
                return;
            }
            
            emptyState.classList.add('hidden');
            
            container.innerHTML = apiKeys.map(key => `
                <div class="rounded-xl border border-slate-200 bg-white p-4 dark:border-slate-800 dark:bg-slate-900/50">
                    <div class="flex items-start justify-between">
                        <div class="flex-1">
                            <div class="flex items-center gap-2 mb-2">
                                <span class="text-sm font-medium text-slate-900 dark:text-white">
                                    sk-...${key.keyHash.slice(-8)}
                                </span>
                                <span class="inline-flex items-center rounded-full px-2 py-1 text-xs font-medium ${key.active ? 'bg-green-100 text-green-700 dark:bg-green-900/20 dark:text-green-300' : 'bg-red-100 text-red-700 dark:bg-red-900/20 dark:text-red-300'}">
                                    ${key.active ? 'Active' : 'Inactive'}
                                </span>
                            </div>
                            <div class="grid grid-cols-2 gap-4 text-xs text-slate-500 dark:text-slate-400 mb-3">
                                <div>
                                    <span class="font-medium">Created:</span> ${formatDate(key.createdAt)}
                                </div>
                                <div>
                                    <span class="font-medium">Usage:</span> ${key.usageCount} calls
                                </div>
                                <div>
                                    <span class="font-medium">Rate Limit:</span> ${key.rateLimitCapacity}/min
                                </div>
                                <div>
                                    <span class="font-medium">Last Used:</span> ${key.lastUsedAt ? formatDate(key.lastUsedAt) : 'Never'}
                                </div>
                            </div>
                            <div class="flex space-x-2">
                                <button onclick="copyToClipboard('sk-...${key.keyHash.slice(-8)}')" class="inline-flex items-center rounded-md bg-slate-100 px-2 py-1 text-xs font-medium text-slate-700 hover:bg-slate-200 dark:bg-slate-800 dark:text-slate-300 dark:hover:bg-slate-700">
                                    <span class="material-symbols-outlined mr-1 text-sm">content_copy</span>
                                    Copy
                                </button>
                                <button onclick="revokeKey('${key._id}')" class="inline-flex items-center rounded-md bg-red-100 px-2 py-1 text-xs font-medium text-red-700 hover:bg-red-200 dark:bg-red-900/20 dark:text-red-300 dark:hover:bg-red-900/30">
                                    <span class="material-symbols-outlined mr-1 text-sm">delete</span>
                                    Revoke
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            `).join('');
        }

        // Load API keys
        async function loadApiKeys() {
            try {
                const response = await fetch('/api-keys', {
                    headers: {
                        'Authorization': `Bearer ${authToken}`
                    }
                });
                
                if (response.ok) {
                    const result = await response.json();
                    apiKeys = result.keys || [];
                    renderApiKeys();
                } else if (response.status === 401) {
                    window.location.href = '/auth/login';
                } else {
                    showAlert('error', 'Failed to load API keys');
                }
            } catch (error) {
                showAlert('error', 'Network error while loading API keys');
            }
        }

        // Generate new API key
        async function generateApiKey() {
            const confirmBtn = document.getElementById('confirmGenerateBtn');
            const btnText = document.getElementById('generateBtnText');
            const spinner = document.getElementById('generateSpinner');
            
            confirmBtn.disabled = true;
            btnText.textContent = 'Generating...';
            spinner.classList.remove('hidden');
            
            try {
                const response = await fetch('/api-keys/generate', {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${authToken}`,
                        'Content-Type': 'application/json'
                    }
                });
                
                const result = await response.json();
                
                if (response.ok) {
                    document.getElementById('generatedApiKey').value = result.apiKey;
                    document.getElementById('generateKeyModal').classList.add('hidden');
                    document.getElementById('keyDisplayModal').classList.remove('hidden');
                    await loadApiKeys(); // Refresh the list
                } else {
                    showAlert('error', result.message || 'Failed to generate API key');
                }
            } catch (error) {
                showAlert('error', 'Network error while generating API key');
            } finally {
                confirmBtn.disabled = false;
                btnText.textContent = 'Generate';
                spinner.classList.add('hidden');
            }
        }

        // Revoke API key
        async function revokeKey(keyId) {
            if (!confirm('Are you sure you want to revoke this API key? This action cannot be undone.')) {
                return;
            }
            
            try {
                const response = await fetch(`/api-keys/revoke/${keyId}`, {
                    method: 'DELETE',
                    headers: {
                        'Authorization': `Bearer ${authToken}`
                    }
                });
                
                if (response.ok) {
                    showAlert('success', 'API key revoked successfully');
                    await loadApiKeys(); // Refresh the list
                } else {
                    showAlert('error', 'Failed to revoke API key');
                }
            } catch (error) {
                showAlert('error', 'Network error while revoking API key');
            }
        }

        // Copy to clipboard
        async function copyToClipboard(text) {
            try {
                await navigator.clipboard.writeText(text);
                showAlert('success', 'Copied to clipboard!');
            } catch (error) {
                showAlert('error', 'Failed to copy to clipboard');
            }
        }

        // Event listeners
        document.getElementById('generateKeyBtn').addEventListener('click', () => {
            document.getElementById('generateKeyModal').classList.remove('hidden');
        });

        document.getElementById('createFirstKeyBtn').addEventListener('click', () => {
            document.getElementById('generateKeyModal').classList.remove('hidden');
        });

        document.getElementById('confirmGenerateBtn').addEventListener('click', generateApiKey);

        document.getElementById('cancelGenerateBtn').addEventListener('click', () => {
            document.getElementById('generateKeyModal').classList.add('hidden');
        });

        document.getElementById('closeKeyModalBtn').addEventListener('click', () => {
            document.getElementById('keyDisplayModal').classList.add('hidden');
        });

        document.getElementById('copyKeyBtn').addEventListener('click', () => {
            const keyValue = document.getElementById('generatedApiKey').value;
            copyToClipboard(keyValue);
        });

        // Load API keys on page load
        document.addEventListener('DOMContentLoaded', () => {
            if (!authToken) {
                window.location.href = '/auth/login';
                return;
            }
            loadApiKeys();
        });
    </script>

    <script src="/js/navigation.js"></script>
</body>
</html>
