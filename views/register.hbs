<!DOCTYPE html>
<html class="dark" lang="en">
<head>
    <meta charset="utf-8"/>
    <meta content="width=device-width, initial-scale=1.0" name="viewport"/>
    <title>Register - API Rate Limiter</title>
    <link href="https://fonts.googleapis.com" rel="preconnect"/>
    <link crossorigin="" href="https://fonts.gstatic.com" rel="preconnect"/>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700&display=swap" rel="stylesheet"/>
    <link href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined" rel="stylesheet"/>
    <script src="https://cdn.tailwindcss.com?plugins=forms,container-queries"></script>
    <script>
        tailwind.config = {
            darkMode: "class",
            theme: {
                extend: {
                    colors: {
                        primary: "#0c5fe4",
                        "background-light": "#f5f7f8",
                        "background-dark": "#101722",
                    },
                    fontFamily: {
                        display: ["Inter"],
                    },
                    borderRadius: {
                        DEFAULT: "0.25rem",
                        lg: "0.5rem",
                        xl: "0.75rem",
                        full: "9999px",
                    },
                },
            },
        };
    </script>
    <style>
        .material-symbols-outlined {
            font-variation-settings: "FILL" 1, "wght" 400, "GRAD" 0, "opsz" 24;
        }
    </style>
</head>
<body class="bg-background-light dark:bg-background-dark font-display text-slate-800 dark:text-slate-200 min-h-screen">
    <div class="flex min-h-screen items-center justify-center px-4 py-12">
        <div class="w-full max-w-md">
            <!-- Header -->
            <div class="text-center mb-8">
                <h1 class="text-3xl font-bold text-slate-900 dark:text-white mb-2">Create Account</h1>
                <p class="text-slate-500 dark:text-slate-400">Join API Rate Limiter and start managing your APIs</p>
            </div>

            <!-- Registration Form -->
            <form id="registerForm" class="space-y-6">
                <!-- Alert Container -->
                <div id="alertContainer" class="hidden rounded-lg p-4 mb-4">
                    <div class="flex">
                        <div class="flex-shrink-0">
                            <span id="alertIcon" class="material-symbols-outlined text-lg"></span>
                        </div>
                        <div class="ml-3">
                            <p id="alertMessage" class="text-sm font-medium"></p>
                        </div>
                    </div>
                </div>

                <div class="grid grid-cols-2 gap-4">
                    <div>
                        <label for="firstName" class="block text-sm font-medium text-slate-700 dark:text-slate-300 mb-2">
                            First Name
                        </label>
                        <input 
                            type="text" 
                            id="firstName" 
                            name="firstName" 
                            required 
                            class="block w-full rounded-lg border border-slate-300 dark:border-slate-700 bg-white dark:bg-slate-800 px-3 py-2 text-slate-900 dark:text-white placeholder-slate-500 dark:placeholder-slate-400 focus:border-primary focus:outline-none focus:ring-2 focus:ring-primary/20"
                            placeholder="John"
                        />
                    </div>
                    <div>
                        <label for="lastName" class="block text-sm font-medium text-slate-700 dark:text-slate-300 mb-2">
                            Last Name
                        </label>
                        <input 
                            type="text" 
                            id="lastName" 
                            name="lastName" 
                            required 
                            class="block w-full rounded-lg border border-slate-300 dark:border-slate-700 bg-white dark:bg-slate-800 px-3 py-2 text-slate-900 dark:text-white placeholder-slate-500 dark:placeholder-slate-400 focus:border-primary focus:outline-none focus:ring-2 focus:ring-primary/20"
                            placeholder="Doe"
                        />
                    </div>
                </div>

                <div>
                    <label for="email" class="block text-sm font-medium text-slate-700 dark:text-slate-300 mb-2">
                        Email Address
                    </label>
                    <input 
                        type="email" 
                        id="email" 
                        name="email" 
                        required 
                        class="block w-full rounded-lg border border-slate-300 dark:border-slate-700 bg-white dark:bg-slate-800 px-3 py-2 text-slate-900 dark:text-white placeholder-slate-500 dark:placeholder-slate-400 focus:border-primary focus:outline-none focus:ring-2 focus:ring-primary/20"
                        placeholder="john.doe@example.com"
                    />
                </div>

                <div>
                    <label for="organization" class="block text-sm font-medium text-slate-700 dark:text-slate-300 mb-2">
                        Organization
                    </label>
                    <input 
                        type="text" 
                        id="organization" 
                        name="organization" 
                        required 
                        class="block w-full rounded-lg border border-slate-300 dark:border-slate-700 bg-white dark:bg-slate-800 px-3 py-2 text-slate-900 dark:text-white placeholder-slate-500 dark:placeholder-slate-400 focus:border-primary focus:outline-none focus:ring-2 focus:ring-primary/20"
                        placeholder="Your Company"
                    />
                </div>

                <div>
                    <label for="password" class="block text-sm font-medium text-slate-700 dark:text-slate-300 mb-2">
                        Password
                    </label>
                    <div class="relative">
                        <input 
                            type="password" 
                            id="password" 
                            name="password" 
                            required 
                            minlength="8"
                            class="block w-full rounded-lg border border-slate-300 dark:border-slate-700 bg-white dark:bg-slate-800 px-3 py-2 pr-10 text-slate-900 dark:text-white placeholder-slate-500 dark:placeholder-slate-400 focus:border-primary focus:outline-none focus:ring-2 focus:ring-primary/20"
                            placeholder="Create a strong password"
                        />
                        <button type="button" id="togglePassword" class="absolute inset-y-0 right-0 flex items-center pr-3 text-slate-400 hover:text-slate-600 dark:hover:text-slate-300">
                            <span class="material-symbols-outlined text-lg">visibility_off</span>
                        </button>
                    </div>
                    <!-- Password Strength Indicator -->
                    <div class="mt-2">
                        <div class="flex space-x-1">
                            <div id="strength-1" class="h-1 w-full rounded bg-slate-200 dark:bg-slate-700"></div>
                            <div id="strength-2" class="h-1 w-full rounded bg-slate-200 dark:bg-slate-700"></div>
                            <div id="strength-3" class="h-1 w-full rounded bg-slate-200 dark:bg-slate-700"></div>
                            <div id="strength-4" class="h-1 w-full rounded bg-slate-200 dark:bg-slate-700"></div>
                        </div>
                        <p id="strengthText" class="mt-1 text-xs text-slate-500 dark:text-slate-400">Password strength will appear here</p>
                    </div>
                </div>

                <div>
                    <label for="confirmPassword" class="block text-sm font-medium text-slate-700 dark:text-slate-300 mb-2">
                        Confirm Password
                    </label>
                    <input 
                        type="password" 
                        id="confirmPassword" 
                        name="confirmPassword" 
                        required 
                        class="block w-full rounded-lg border border-slate-300 dark:border-slate-700 bg-white dark:bg-slate-800 px-3 py-2 text-slate-900 dark:text-white placeholder-slate-500 dark:placeholder-slate-400 focus:border-primary focus:outline-none focus:ring-2 focus:ring-primary/20"
                        placeholder="Confirm your password"
                    />
                </div>

                <div class="flex items-center">
                    <input 
                        id="terms" 
                        name="terms" 
                        type="checkbox" 
                        required
                        class="h-4 w-4 rounded border-slate-300 text-primary focus:ring-primary dark:border-slate-700 dark:bg-slate-800"
                    />
                    <label for="terms" class="ml-2 block text-sm text-slate-700 dark:text-slate-300">
                        I agree to the <a href="#" class="text-primary hover:text-primary/80">Terms of Service</a> and <a href="#" class="text-primary hover:text-primary/80">Privacy Policy</a>
                    </label>
                </div>

                <button 
                    type="submit" 
                    id="registerButton"
                    class="w-full flex justify-center items-center rounded-lg bg-primary px-4 py-2 text-sm font-semibold text-white hover:bg-primary/90 focus:outline-none focus:ring-2 focus:ring-primary/20 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                    <span id="registerButtonText">Create Account</span>
                    <span id="registerSpinner" class="hidden ml-2">
                        <svg class="animate-spin h-4 w-4" fill="none" viewBox="0 0 24 24">
                            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                        </svg>
                    </span>
                </button>
            </form>

            <!-- Sign In Link -->
            <div class="mt-6 text-center">
                <p class="text-sm text-slate-500 dark:text-slate-400">
                    Already have an account? 
                    <a href="/auth/login" class="text-primary hover:text-primary/80 font-medium">Sign in</a>
                </p>
            </div>
        </div>
    </div>

    <script>
        // Toggle password visibility
        document.getElementById('togglePassword').addEventListener('click', function() {
            const passwordInput = document.getElementById('password');
            const icon = this.querySelector('.material-symbols-outlined');
            
            if (passwordInput.type === 'password') {
                passwordInput.type = 'text';
                icon.textContent = 'visibility';
            } else {
                passwordInput.type = 'password';
                icon.textContent = 'visibility_off';
            }
        });

        // Password strength checker
        function checkPasswordStrength(password) {
            let strength = 0;
            const checks = {
                length: password.length >= 8,
                lowercase: /[a-z]/.test(password),
                uppercase: /[A-Z]/.test(password),
                numbers: /\d/.test(password),
                special: /[!@#$%^&*(),.?":{}|<>]/.test(password)
            };

            Object.values(checks).forEach(check => {
                if (check) strength++;
            });

            return { strength, checks };
        }

        // Update password strength indicator
        document.getElementById('password').addEventListener('input', function() {
            const password = this.value;
            const { strength } = checkPasswordStrength(password);
            
            // Reset all bars
            for (let i = 1; i <= 4; i++) {
                const bar = document.getElementById(`strength-${i}`);
                bar.className = 'h-1 w-full rounded bg-slate-200 dark:bg-slate-700';
            }

            // Update bars based on strength
            const colors = ['bg-red-500', 'bg-orange-500', 'bg-yellow-500', 'bg-green-500'];
            const labels = ['Weak', 'Fair', 'Good', 'Strong'];
            
            if (password.length > 0) {
                const strengthLevel = Math.min(Math.floor((strength - 1) / 1.25), 3);
                
                for (let i = 1; i <= strengthLevel + 1; i++) {
                    const bar = document.getElementById(`strength-${i}`);
                    bar.className = `h-1 w-full rounded ${colors[strengthLevel]}`;
                }
                
                document.getElementById('strengthText').textContent = 
                    `Password strength: ${labels[strengthLevel] || 'Weak'}`;
            } else {
                document.getElementById('strengthText').textContent = 
                    'Password strength will appear here';
            }
        });

        // Show alert function
        function showAlert(type, message) {
            const alertContainer = document.getElementById('alertContainer');
            const alertIcon = document.getElementById('alertIcon');
            const alertMessage = document.getElementById('alertMessage');
            
            alertContainer.className = `rounded-lg p-4 mb-4 ${type === 'error' ? 'bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800' : 'bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800'}`;
            alertIcon.textContent = type === 'error' ? 'error' : 'check_circle';
            alertIcon.className = `material-symbols-outlined text-lg ${type === 'error' ? 'text-red-500' : 'text-green-500'}`;
            alertMessage.textContent = message;
            alertMessage.className = `text-sm font-medium ${type === 'error' ? 'text-red-700 dark:text-red-300' : 'text-green-700 dark:text-green-300'}`;
            
            alertContainer.classList.remove('hidden');
        }

        // Hide alert function
        function hideAlert() {
            document.getElementById('alertContainer').classList.add('hidden');
        }

        // Form validation
        function validateForm() {
            const password = document.getElementById('password').value;
            const confirmPassword = document.getElementById('confirmPassword').value;
            
            if (password !== confirmPassword) {
                showAlert('error', 'Passwords do not match');
                return false;
            }

            const { strength } = checkPasswordStrength(password);
            if (strength < 3) {
                showAlert('error', 'Password is too weak. Please use a stronger password.');
                return false;
            }

            return true;
        }

        // Form submission
        document.getElementById('registerForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            hideAlert();
            
            if (!validateForm()) {
                return;
            }
            
            const registerButton = document.getElementById('registerButton');
            const registerButtonText = document.getElementById('registerButtonText');
            const registerSpinner = document.getElementById('registerSpinner');
            
            // Show loading state
            registerButton.disabled = true;
            registerButtonText.textContent = 'Creating Account...';
            registerSpinner.classList.remove('hidden');
            
            const formData = {
                name: `${document.getElementById('firstName').value} ${document.getElementById('lastName').value}`,
                email: document.getElementById('email').value,
                organization: document.getElementById('organization').value,
                password: document.getElementById('password').value
            };
            
            try {
                const response = await fetch('/auth/register', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(formData)
                });
                
                const result = await response.json();
                
                if (response.ok) {
                    showAlert('success', 'Account created successfully! Redirecting to login...');
                    // Redirect after a short delay
                    setTimeout(() => {
                        window.location.href = '/auth/login';
                    }, 2000);
                } else {
                    showAlert('error', result.message || 'Registration failed. Please try again.');
                }
            } catch (error) {
                showAlert('error', 'Network error. Please check your connection and try again.');
            } finally {
                // Reset button state
                registerButton.disabled = false;
                registerButtonText.textContent = 'Create Account';
                registerSpinner.classList.add('hidden');
            }
        });
    </script>
</body>
</html>
