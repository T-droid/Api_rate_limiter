<!DOCTYPE html>
<html class="dark" lang="en">
<head>
<meta charset="utf-8"/>
<meta content="width=device-width, initial-scale=1.0" name="viewport"/>
<title>Dashboard - API Rate Limiter</title>
<link href="https://fonts.googleapis.com" rel="preconnect"/>
<link crossorigin="" href="https://fonts.gstatic.com" rel="preconnect"/>
<link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700&display=swap" rel="stylesheet"/>
<link href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined" rel="stylesheet"/>
<script src="https://cdn.tailwindcss.com?plugins=forms,container-queries"></script>
<script>
      tailwind.config = {
        darkMode: "class",
        theme: {
          extend: {
            colors: {
              primary: "#0c5fe4",
              "background-light": "#f5f7f8",
              "background-dark": "#101722",
            },
            fontFamily: {
              display: ["Inter"],
            },
            borderRadius: {
              DEFAULT: "0.25rem",
              lg: "0.5rem",
              xl: "0.75rem",
              full: "9999px",
            },
          },
        },
      };
    </script>
<style>
    body {
      min-height: max(884px, 100dvh);
    }
  </style>
  </head>
<body class="bg-background-light dark:bg-background-dark font-display">
<div class="flex flex-col min-h-screen">
{{> header}}
<main class="flex-grow">
<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
<!-- Page Header -->
<div class="mb-8">
<h1 class="text-3xl font-bold text-gray-900 dark:text-white">Dashboard</h1>
<p class="mt-2 text-gray-600 dark:text-gray-400">Monitor your API usage and performance</p>
</div>
<div class="grid grid-cols-1 gap-6 sm:grid-cols-2 xl:grid-cols-4">
<div class="rounded-xl border border-black/10 bg-white p-6 dark:border-white/10 dark:bg-black/20">
<p class="text-sm font-medium text-black/60 dark:text-white/60">Total Requests</p>
<p class="mt-2 text-3xl font-bold text-black dark:text-white" id="totalRequests">{{dashboardData.totalRequests}}</p>
<p class="mt-1 text-sm font-medium {{#if dashboardData.requestsTrend.direction}}{{#eq dashboardData.requestsTrend.direction 'up'}}text-green-500{{/eq}}{{#eq dashboardData.requestsTrend.direction 'down'}}text-red-500{{/eq}}{{#eq dashboardData.requestsTrend.direction 'stable'}}text-gray-500{{/eq}}{{/if}}" id="requestsTrend">
  {{#if dashboardData.requestsTrend.direction}}
    {{#eq dashboardData.requestsTrend.direction 'up'}}+{{/eq}}{{#eq dashboardData.requestsTrend.direction 'down'}}-{{/eq}}{{dashboardData.requestsTrend.percentage}}%
  {{else}}
    --
  {{/if}}
</p>
</div>
<div class="rounded-xl border border-black/10 bg-white p-6 dark:border-white/10 dark:bg-black/20">
<p class="text-sm font-medium text-black/60 dark:text-white/60">Success Rate</p>
<p class="mt-2 text-3xl font-bold text-black dark:text-white" id="successRate">{{dashboardData.successRate}}%</p>
<p class="mt-1 text-sm font-medium text-gray-500" id="successfulCount">{{dashboardData.successfulRequests}} successful</p>
</div>
<div class="rounded-xl border border-black/10 bg-white p-6 dark:border-white/10 dark:bg-black/20">
<p class="text-sm font-medium text-black/60 dark:text-white/60">API Keys</p>
<p class="mt-2 text-3xl font-bold text-black dark:text-white" id="totalApiKeys">{{dashboardData.totalApiKeys}}</p>
<p class="mt-1 text-sm font-medium text-gray-500" id="activeApiKeys">{{dashboardData.activeApiKeys}} active</p>
</div>
<div class="rounded-xl border border-black/10 bg-white p-6 dark:border-white/10 dark:bg-black/20">
<p class="text-sm font-medium text-black/60 dark:text-white/60">Error Rate</p>
<p class="mt-2 text-3xl font-bold text-black dark:text-white" id="errorRate">{{dashboardData.errorRate}}%</p>
<p class="mt-1 text-sm font-medium text-gray-500" id="failedCount">{{dashboardData.failedRequests}} failed</p>
</div>
</div>
<div class="mt-8 rounded-xl border border-black/10 bg-white p-6 dark:border-white/10 dark:bg-black/20">
<div class="flex flex-col sm:flex-row sm:items-center sm:justify-between">
<div>
<p class="text-sm font-medium text-black/60 dark:text-white/60">Requests Over Time</p>
<p class="mt-2 text-3xl font-bold text-black dark:text-white" id="chartTotalRequests">{{dashboardData.totalRequests}}</p>
<div class="mt-1 flex items-center gap-2">
<p class="text-sm text-black/60 dark:text-white/60">Last 7 Days</p>
<p class="text-sm font-medium text-gray-500" id="chartAverage">{{dashboardData.avgRequestsPerDay}} avg/day</p>
</div>
</div>
</div>
<div class="mt-6 h-48" id="chartContainer">
<!-- Chart will be dynamically generated based on dashboardData.dailyData -->
<canvas id="requestsChart" width="472" height="150"></canvas>
</div>
<div class="mt-4 flex justify-around" id="chartLabels">
{{#each dashboardData.dailyData}}
<p class="text-xs font-bold text-black/60 dark:text-white/60">{{formatDate this.date}}</p>
{{/each}}
</div>
</div>
<div class="mt-8 grid grid-cols-1 gap-8 lg:grid-cols-3">
<div class="lg:col-span-2">
<h2 class="text-lg font-bold text-black dark:text-white">Recent API Calls</h2>
<div class="mt-4 flow-root">
<div class="-my-2 overflow-x-auto">
<div class="inline-block min-w-full py-2 align-middle">
<div class="overflow-hidden rounded-xl border border-black/10 dark:border-white/10">
<table class="min-w-full divide-y divide-black/10 dark:divide-white/10">
<tbody class="divide-y divide-black/10 bg-white dark:divide-white/10 dark:bg-black/20" id="recentActivityTable">
{{#each dashboardData.recentActivity}}
<tr>
<td class="whitespace-nowrap px-6 py-4">
<p class="font-medium text-black dark:text-white">{{this.status}} {{this.statusText}}</p>
<p class="text-sm text-black/60 dark:text-white/60">{{this.method}} {{this.endpoint}}</p>
</td>
<td class="whitespace-nowrap px-6 py-4 text-right text-sm text-black/60 dark:text-white/60">{{formatTime this.timestamp}}</td>
</tr>
{{else}}
<tr>
<td class="whitespace-nowrap px-6 py-4 text-center" colspan="2">
<p class="text-sm text-black/60 dark:text-white/60">No recent activity</p>
</td>
</tr>
{{/each}}
</tbody>
</table>
</div>
</div>
</div>
</div>
</div>
<div class="space-y-8">
<div>
<h2 class="text-lg font-bold text-black dark:text-white">Rate Limit Status</h2>
<div class="mt-4 rounded-xl border border-black/10 bg-white p-6 dark:border-white/10 dark:bg-black/20" id="rateLimitStatus">
<div class="flex items-center justify-between text-sm">
<p class="font-medium text-black/60 dark:text-white/60">Requests</p>
<p class="font-medium text-black dark:text-white" id="rateLimitText">Loading...</p>
</div>
<div class="mt-2 h-2 rounded-full bg-primary/20 dark:bg-primary/30">
<div class="h-2 rounded-full bg-primary" id="rateLimitBar" style="width: 0%;"></div>
</div>
<div class="mt-2 text-xs text-black/60 dark:text-white/60" id="rateLimitReset">Reset time: Loading...</div>
</div>
</div>
<div>
<h2 class="text-lg font-bold text-black dark:text-white">Quick Actions</h2>
<div class="mt-4 space-y-3">
<button id="generateKeyBtn" class="flex w-full items-center justify-center rounded-lg bg-primary px-4 py-3 text-sm font-bold text-white shadow-sm transition hover:bg-primary/90">Generate API Key</button>
<a href="/docs" class="flex w-full items-center justify-center rounded-lg bg-primary/10 px-4 py-3 text-sm font-bold text-primary shadow-sm transition hover:bg-primary/20 dark:bg-primary/20 dark:hover:bg-primary/30">View Documentation</a>
</div>
</div>
</div>
</div>
</div>
</div>
</main>
</div>

<script>
    let dashboardData = {{{json dashboardData}}};

    // Initialize dashboard
    document.addEventListener('DOMContentLoaded', function() {
        initializeChart();
        loadRateLimitStatus();
        formatRecentActivity();
        
        // Refresh data every 30 seconds
        setInterval(refreshDashboardData, 30000);
    });

    // Initialize the requests chart
    function initializeChart() {
        const canvas = document.getElementById('requestsChart');
        const ctx = canvas.getContext('2d');
        
        if (!dashboardData.dailyData || dashboardData.dailyData.length === 0) {
            // Draw empty state
            ctx.fillStyle = '#6b7280';
            ctx.font = '14px Inter';
            ctx.textAlign = 'center';
            ctx.fillText('No data available', canvas.width / 2, canvas.height / 2);
            return;
        }

        // Clear canvas
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        
        const data = dashboardData.dailyData;
        const maxValue = Math.max(...data.map(d => d.totalCalls)) || 1;
        const padding = 40;
        const chartWidth = canvas.width - (padding * 2);
        const chartHeight = canvas.height - (padding * 2);
        
        // Draw chart area
        ctx.strokeStyle = '#e5e7eb';
        ctx.lineWidth = 1;
        ctx.strokeRect(padding, padding, chartWidth, chartHeight);
        
        // Draw data points and lines
        if (data.length > 1) {
            ctx.beginPath();
            ctx.strokeStyle = '#0c5fe4';
            ctx.lineWidth = 2;
            
            data.forEach((point, index) => {
                const x = padding + (index / (data.length - 1)) * chartWidth;
                const y = padding + chartHeight - (point.totalCalls / maxValue) * chartHeight;
                
                if (index === 0) {
                    ctx.moveTo(x, y);
                } else {
                    ctx.lineTo(x, y);
                }
                
                // Draw point
                ctx.fillStyle = '#0c5fe4';
                ctx.beginPath();
                ctx.arc(x, y, 3, 0, 2 * Math.PI);
                ctx.fill();
            });
            
            ctx.stroke();
        }
    }

    // Load rate limit status
    async function loadRateLimitStatus() {
        try {
            const response = await fetch('/dashboard/api/rate-limit-status');
            if (response.ok) {
                const rateLimitData = await response.json();
                updateRateLimitDisplay(rateLimitData);
            }
        } catch (error) {
            console.error('Error loading rate limit status:', error);
            document.getElementById('rateLimitText').textContent = 'Error loading data';
        }
    }

    // Update rate limit display
    function updateRateLimitDisplay(data) {
        document.getElementById('rateLimitText').textContent = `${data.current} / ${data.limit}`;
        document.getElementById('rateLimitBar').style.width = `${data.percentage}%`;
        
        const resetTime = new Date(data.resetTime).toLocaleTimeString();
        document.getElementById('rateLimitReset').textContent = `Resets at: ${resetTime}`;
    }

    // Format recent activity timestamps
    function formatRecentActivity() {
        const timeElements = document.querySelectorAll('#recentActivityTable td:last-child');
        timeElements.forEach(element => {
            const timestamp = element.textContent;
            if (timestamp && timestamp !== 'No recent activity') {
                try {
                    const date = new Date(timestamp);
                    const now = new Date();
                    const diffMs = now - date;
                    const diffMins = Math.floor(diffMs / 60000);
                    
                    if (diffMins < 1) {
                        element.textContent = 'Just now';
                    } else if (diffMins < 60) {
                        element.textContent = `${diffMins} min ago`;
                    } else {
                        const diffHours = Math.floor(diffMins / 60);
                        element.textContent = `${diffHours}h ago`;
                    }
                } catch (error) {
                    // Keep original text if parsing fails
                }
            }
        });
    }

    // Refresh dashboard data
    async function refreshDashboardData() {
        try {
            const response = await fetch('/dashboard/api/dashboard-data');
            if (response.ok) {
                const newData = await response.json();
                dashboardData = newData;
                updateDashboardDisplay(newData);
            }
        } catch (error) {
            console.error('Error refreshing dashboard data:', error);
        }
    }

    // Update dashboard display with new data
    function updateDashboardDisplay(data) {
        // Update metrics
        document.getElementById('totalRequests').textContent = data.totalRequests.toLocaleString();
        document.getElementById('successRate').textContent = `${data.successRate}%`;
        document.getElementById('totalApiKeys').textContent = data.totalApiKeys;
        document.getElementById('activeApiKeys').textContent = `${data.activeApiKeys} active`;
        document.getElementById('errorRate').textContent = `${data.errorRate}%`;
        document.getElementById('successfulCount').textContent = `${data.successfulRequests} successful`;
        document.getElementById('failedCount').textContent = `${data.failedRequests} failed`;
        
        // Update trend
        const trendElement = document.getElementById('requestsTrend');
        if (data.requestsTrend && data.requestsTrend.direction !== 'stable') {
            const sign = data.requestsTrend.direction === 'up' ? '+' : '-';
            trendElement.textContent = `${sign}${data.requestsTrend.percentage}%`;
            trendElement.className = `mt-1 text-sm font-medium ${data.requestsTrend.direction === 'up' ? 'text-green-500' : 'text-red-500'}`;
        } else {
            trendElement.textContent = '--';
            trendElement.className = 'mt-1 text-sm font-medium text-gray-500';
        }
        
        // Update chart
        initializeChart();
        
        // Update rate limit status
        loadRateLimitStatus();
    }

    // Generate API Key action
    document.getElementById('generateKeyBtn').addEventListener('click', async () => {
        const button = document.getElementById('generateKeyBtn');
        const originalText = button.textContent;
        
        button.textContent = 'Generating...';
        button.disabled = true;
        
        try {
            const response = await fetch('/api-keys/generate', {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${authToken}`,
                    'Content-Type': 'application/json'
                }
            });
            
            if (response.ok) {
                const result = await response.json();
                alert(`API Key Generated Successfully!\n\nKey: ${result.apiKey}\n\n⚠️ Make sure to copy this key now. You won't be able to see it again!`);
                // Reload dashboard data to update counts
                loadDashboardData();
            } else {
                const error = await response.json();
                alert(`Error: ${error.message || 'Failed to generate API key'}`);
            }
        } catch (error) {
            alert('Network error. Please try again.');
        } finally {
            button.textContent = originalText;
            button.disabled = false;
        }
    });

    // Logout function
    function logout() {
        localStorage.removeItem('authToken');
        window.location.href = '/auth/logout';
    }

    // Add logout functionality to any logout buttons
    document.addEventListener('DOMContentLoaded', () => {
        const logoutButtons = document.querySelectorAll('[data-action="logout"]');
        logoutButtons.forEach(button => {
            button.addEventListener('click', logout);
        });
        
        // Load dashboard data
        loadDashboardData();
    });
</script>

<script src="/js/navigation.js"></script>
</body></html>