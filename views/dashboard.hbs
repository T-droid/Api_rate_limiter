<!DOCTYPE html>
<html class="dark" lang="en">
<head>
<meta charset="utf-8"/>
<meta content="width=device-width, initial-scale=1.0" name="viewport"/>
<title>Dashboard - API Rate Limiter</title>
<link href="https://fonts.googleapis.com" rel="preconnect"/>
<link crossorigin="" href="https://fonts.gstatic.com" rel="preconnect"/>
<link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700&display=swap" rel="stylesheet"/>
<link href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined" rel="stylesheet"/>
<script src="https://cdn.tailwindcss.com?plugins=forms,container-queries"></script>
<script>
      tailwind.config = {
        darkMode: "class",
        theme: {
          extend: {
            colors: {
              primary: "#0c5fe4",
              "background-light": "#f5f7f8",
              "background-dark": "#101722",
            },
            fontFamily: {
              display: ["Inter"],
            },
            borderRadius: {
              DEFAULT: "0.25rem",
              lg: "0.5rem",
              xl: "0.75rem",
              full: "9999px",
            },
          },
        },
      };
    </script>
<style>
    body {
      min-height: max(884px, 100dvh);
    }
  </style>
  </head>
<body class="bg-background-light dark:bg-background-dark font-display">
<div class="relative min-h-screen">
<aside class="fixed inset-y-0 left-0 z-20 w-64 -translate-x-full transform bg-background-light dark:bg-background-dark p-4 transition-transform duration-300 peer-checked:translate-x-0 lg:translate-x-0 lg:bg-transparent lg:dark:bg-transparent">
<div class="flex h-full flex-col justify-between">
<div>
<div class="mb-8 flex items-center gap-3 px-4 pt-4">
<div class="h-10 w-10 rounded-full bg-primary/20 dark:bg-primary/30 flex items-center justify-center text-primary font-bold text-lg">A</div>
<p class="text-lg font-bold text-black dark:text-white">Alex</p>
</div>
<nav class="flex flex-col gap-2">
<a class="flex items-center gap-3 rounded-lg px-4 py-3 text-black dark:text-white hover:bg-primary/10 dark:hover:bg-primary/20" href="#">
<span class="material-symbols-outlined">home</span>
<span class="font-medium">Home</span>
</a>
<a class="flex items-center gap-3 rounded-lg bg-primary px-4 py-3 text-white" href="#">
<span class="material-symbols-outlined">dashboard</span>
<span class="font-medium">Dashboard</span>
</a>
<a class="flex items-center gap-3 rounded-lg px-4 py-3 text-black dark:text-white hover:bg-primary/10 dark:hover:bg-primary/20" href="#">
<span class="material-symbols-outlined">key</span>
<span class="font-medium">API Keys</span>
</a>
<a class="flex items-center gap-3 rounded-lg px-4 py-3 text-black dark:text-white hover:bg-primary/10 dark:hover:bg-primary/20" href="#">
<span class="material-symbols-outlined">description</span>
<span class="font-medium">Docs</span>
</a>
</nav>
</div>
<button class="flex w-full items-center gap-3 rounded-lg px-4 py-3 text-black dark:text-white hover:bg-primary/10 dark:hover:bg-primary/20">
<span class="material-symbols-outlined">logout</span>
<span class="font-medium">Logout</span>
</button>
</div>
</aside>
<input class="peer hidden" id="nav-toggle" type="checkbox"/>
<main class="lg:pl-64">
<header class="sticky top-0 z-10 flex items-center justify-between bg-background-light/80 p-4 backdrop-blur-sm dark:bg-background-dark/80 lg:justify-end">
<label class="cursor-pointer lg:hidden" for="nav-toggle">
<span class="material-symbols-outlined text-3xl text-black dark:text-white">menu</span>
</label>
<h1 class="text-xl font-bold text-black dark:text-white lg:hidden">Dashboard</h1>
<div class="hidden items-center gap-4 lg:flex">
<div class="h-10 w-10 rounded-full bg-primary/20 dark:bg-primary/30 flex items-center justify-center text-primary font-bold text-lg">A</div>
<div>
<p class="font-bold text-black dark:text-white">Alex</p>
<p class="text-sm text-black/60 dark:text-white/60">Administrator</p>
</div>
</div>
</header>
<div class="p-4 sm:p-6">
<div class="grid grid-cols-1 gap-6 sm:grid-cols-2 xl:grid-cols-3">
<div class="rounded-xl border border-black/10 bg-white p-6 dark:border-white/10 dark:bg-black/20">
<p class="text-sm font-medium text-black/60 dark:text-white/60">Total Requests</p>
<p class="mt-2 text-3xl font-bold text-black dark:text-white">12,345</p>
<p class="mt-1 text-sm font-medium text-green-500">+12%</p>
</div>
<div class="rounded-xl border border-black/10 bg-white p-6 dark:border-white/10 dark:bg-black/20">
<p class="text-sm font-medium text-black/60 dark:text-white/60">Successful Requests</p>
<p class="mt-2 text-3xl font-bold text-black dark:text-white">11,876</p>
<p class="mt-1 text-sm font-medium text-red-500">-2%</p>
</div>
<div class="rounded-xl border border-black/10 bg-white p-6 dark:border-white/10 dark:bg-black/20 sm:col-span-2 xl:col-span-1">
<p class="text-sm font-medium text-black/60 dark:text-white/60">Error Rate</p>
<p class="mt-2 text-3xl font-bold text-black dark:text-white">3.8%</p>
<p class="mt-1 text-sm font-medium text-green-500">+5%</p>
</div>
</div>
<div class="mt-8 rounded-xl border border-black/10 bg-white p-6 dark:border-white/10 dark:bg-black/20">
<div class="flex flex-col sm:flex-row sm:items-center sm:justify-between">
<div>
<p class="text-sm font-medium text-black/60 dark:text-white/60">Requests Over Time</p>
<p class="mt-2 text-3xl font-bold text-black dark:text-white">12,345</p>
<div class="mt-1 flex items-center gap-2">
<p class="text-sm text-black/60 dark:text-white/60">Last 7 Days</p>
<p class="text-sm font-medium text-green-500">+12%</p>
</div>
</div>
</div>
<div class="mt-6 h-48">
<svg fill="none" height="100%" preserveAspectRatio="none" viewBox="0 0 472 150" width="100%" xmlns="http://www.w3.org/2000/svg">
<path d="M0 109C18.1538 109 18.1538 21 36.3077 21C54.4615 21 54.4615 41 72.6154 41C90.7692 41 90.7692 93 108.923 93C127.077 93 127.077 33 145.231 33C163.385 33 163.385 101 181.538 101C199.692 101 199.692 61 217.846 61C236 61 236 45 254.154 45C272.308 45 272.308 121 290.462 121C308.615 121 308.615 149 326.769 149C344.923 149 344.923 1 363.077 1C381.231 1 381.231 81 399.385 81C417.538 81 417.538 129 435.692 129C453.846 129 453.846 25 472 25V149H0V109Z" fill="url(#chart-gradient)"></path>
<path d="M0 109C18.1538 109 18.1538 21 36.3077 21C54.4615 21 54.4615 41 72.6154 41C90.7692 41 90.7692 93 108.923 93C127.077 93 127.077 33 145.231 33C163.385 33 163.385 101 181.538 101C199.692 101 199.692 61 217.846 61C236 61 236 45 254.154 45C272.308 45 272.308 121 290.462 121C308.615 121 308.615 149 326.769 149C344.923 149 344.923 1 363.077 1C381.231 1 381.231 81 399.385 81C417.538 81 417.538 129 435.692 129C453.846 129 453.846 25 472 25" stroke="#0c5fe4" stroke-linecap="round" stroke-width="2"></path>
<defs>
<linearGradient gradientUnits="userSpaceOnUse" id="chart-gradient" x1="236" x2="236" y1="1" y2="149">
<stop stop-color="#0c5fe4" stop-opacity="0.2"></stop>
<stop offset="1" stop-color="#0c5fe4" stop-opacity="0"></stop>
</linearGradient>
</defs>
</svg>
</div>
<div class="mt-4 flex justify-around">
<p class="text-xs font-bold text-black/60 dark:text-white/60">Mon</p>
<p class="text-xs font-bold text-black/60 dark:text-white/60">Tue</p>
<p class="text-xs font-bold text-black/60 dark:text-white/60">Wed</p>
<p class="text-xs font-bold text-black/60 dark:text-white/60">Thu</p>
<p class="text-xs font-bold text-black/60 dark:text-white/60">Fri</p>
<p class="text-xs font-bold text-black/60 dark:text-white/60">Sat</p>
<p class="text-xs font-bold text-black/60 dark:text-white/60">Sun</p>
</div>
</div>
<div class="mt-8 grid grid-cols-1 gap-8 lg:grid-cols-3">
<div class="lg:col-span-2">
<h2 class="text-lg font-bold text-black dark:text-white">Recent API Calls</h2>
<div class="mt-4 flow-root">
<div class="-my-2 overflow-x-auto">
<div class="inline-block min-w-full py-2 align-middle">
<div class="overflow-hidden rounded-xl border border-black/10 dark:border-white/10">
<table class="min-w-full divide-y divide-black/10 dark:divide-white/10">
<tbody class="divide-y divide-black/10 bg-white dark:divide-white/10 dark:bg-black/20">
<tr>
<td class="whitespace-nowrap px-6 py-4">
<p class="font-medium text-black dark:text-white">200 OK</p>
<p class="text-sm text-black/60 dark:text-white/60">GET /users</p>
</td>
<td class="whitespace-nowrap px-6 py-4 text-right text-sm text-black/60 dark:text-white/60">5 min ago</td>
</tr>
<tr>
<td class="whitespace-nowrap px-6 py-4">
<p class="font-medium text-black dark:text-white">201 Created</p>
<p class="text-sm text-black/60 dark:text-white/60">POST /orders</p>
</td>
<td class="whitespace-nowrap px-6 py-4 text-right text-sm text-black/60 dark:text-white/60">10 min ago</td>
</tr>
<tr>
<td class="whitespace-nowrap px-6 py-4">
<p class="font-medium text-black dark:text-white">200 OK</p>
<p class="text-sm text-black/60 dark:text-white/60">GET /products</p>
</td>
<td class="whitespace-nowrap px-6 py-4 text-right text-sm text-black/60 dark:text-white/60">15 min ago</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
</div>
<div class="space-y-8">
<div>
<h2 class="text-lg font-bold text-black dark:text-white">Rate Limit Status</h2>
<div class="mt-4 rounded-xl border border-black/10 bg-white p-6 dark:border-white/10 dark:bg-black/20">
<div class="flex items-center justify-between text-sm">
<p class="font-medium text-black/60 dark:text-white/60">Requests</p>
<p class="font-medium text-black dark:text-white">750 / 1000</p>
</div>
<div class="mt-2 h-2 rounded-full bg-primary/20 dark:bg-primary/30">
<div class="h-2 rounded-full bg-primary" style="width: 75%;"></div>
</div>
</div>
</div>
<div>
<h2 class="text-lg font-bold text-black dark:text-white">Quick Actions</h2>
<div class="mt-4 space-y-3">
<button id="generateKeyBtn" class="flex w-full items-center justify-center rounded-lg bg-primary px-4 py-3 text-sm font-bold text-white shadow-sm transition hover:bg-primary/90">Generate API Key</button>
<a href="/docs" class="flex w-full items-center justify-center rounded-lg bg-primary/10 px-4 py-3 text-sm font-bold text-primary shadow-sm transition hover:bg-primary/20 dark:bg-primary/20 dark:hover:bg-primary/30">View Documentation</a>
</div>
</div>
</div>
</div>
</div>
</main>
<div class="fixed inset-0 z-10 bg-black/50 peer-checked:block lg:hidden"></div>
</div>

<script>
    let authToken = localStorage.getItem('authToken');
    let dashboardData = {};

    // Check authentication
    if (!authToken) {
        window.location.href = '/auth/login';
    }

    // Load dashboard data
    async function loadDashboardData() {
        try {
            // Load user profile
            const userResponse = await fetch('/auth/profile', {
                headers: {
                    'Authorization': `Bearer ${authToken}`
                }
            });
            
            if (userResponse.ok) {
                const userData = await userResponse.json();
                updateUserInfo(userData);
            }

            // Load API keys statistics
            const keysResponse = await fetch('/api-keys', {
                headers: {
                    'Authorization': `Bearer ${authToken}`
                }
            });
            
            if (keysResponse.ok) {
                const keysData = await keysResponse.json();
                updateApiKeysStats(keysData.keys || []);
            }

            // Load analytics data if available
            try {
                const analyticsResponse = await fetch('/analytics/summary', {
                    headers: {
                        'Authorization': `Bearer ${authToken}`
                    }
                });
                
                if (analyticsResponse.ok) {
                    const analyticsData = await analyticsResponse.json();
                    updateAnalyticsStats(analyticsData);
                }
            } catch (error) {
                // Analytics endpoint might not be implemented yet
                console.log('Analytics data not available yet');
            }

        } catch (error) {
            console.error('Error loading dashboard data:', error);
        }
    }

    // Update user info
    function updateUserInfo(userData) {
        const userNameElement = document.querySelector('.text-lg.font-bold.text-black.dark\\:text-white');
        if (userNameElement && userData.name) {
            userNameElement.textContent = userData.name.split(' ')[0]; // First name only
        }
    }

    // Update API keys statistics
    function updateApiKeysStats(apiKeys) {
        const totalKeys = apiKeys.length;
        const activeKeys = apiKeys.filter(key => key.active).length;
        
        // Update the API Keys card
        const apiKeysCards = document.querySelectorAll('.rounded-xl.border.border-black\\/10.bg-white.p-4');
        if (apiKeysCards.length > 0) {
            const apiKeysCard = apiKeysCards[0];
            const countElement = apiKeysCard.querySelector('.text-2xl.font-bold');
            const labelElement = apiKeysCard.querySelector('.text-sm.text-black\\/60');
            
            if (countElement) countElement.textContent = totalKeys;
            if (labelElement) labelElement.textContent = `${activeKeys} active`;
        }
    }

    // Update analytics statistics
    function updateAnalyticsStats(analyticsData) {
        if (analyticsData.totalRequests !== undefined) {
            // Update requests card
            const cards = document.querySelectorAll('.rounded-xl.border.border-black\\/10.bg-white.p-4');
            if (cards.length > 1) {
                const requestsCard = cards[1];
                const countElement = requestsCard.querySelector('.text-2xl.font-bold');
                if (countElement) countElement.textContent = analyticsData.totalRequests.toLocaleString();
            }
        }

        if (analyticsData.rateLimitHits !== undefined) {
            // Update rate limit card
            const cards = document.querySelectorAll('.rounded-xl.border.border-black\\/10.bg-white.p-4');
            if (cards.length > 2) {
                const rateLimitCard = cards[2];
                const countElement = rateLimitCard.querySelector('.text-2xl.font-bold');
                if (countElement) countElement.textContent = analyticsData.rateLimitHits.toLocaleString();
            }
        }
    }

    // Generate API Key action
    document.getElementById('generateKeyBtn').addEventListener('click', async () => {
        const button = document.getElementById('generateKeyBtn');
        const originalText = button.textContent;
        
        button.textContent = 'Generating...';
        button.disabled = true;
        
        try {
            const response = await fetch('/api-keys/generate', {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${authToken}`,
                    'Content-Type': 'application/json'
                }
            });
            
            if (response.ok) {
                const result = await response.json();
                alert(`API Key Generated Successfully!\n\nKey: ${result.apiKey}\n\n⚠️ Make sure to copy this key now. You won't be able to see it again!`);
                // Reload dashboard data to update counts
                loadDashboardData();
            } else {
                const error = await response.json();
                alert(`Error: ${error.message || 'Failed to generate API key'}`);
            }
        } catch (error) {
            alert('Network error. Please try again.');
        } finally {
            button.textContent = originalText;
            button.disabled = false;
        }
    });

    // Logout function
    function logout() {
        localStorage.removeItem('authToken');
        window.location.href = '/auth/login';
    }

    // Add logout functionality to any logout buttons
    document.addEventListener('DOMContentLoaded', () => {
        const logoutButtons = document.querySelectorAll('[data-action="logout"]');
        logoutButtons.forEach(button => {
            button.addEventListener('click', logout);
        });
        
        // Load dashboard data
        loadDashboardData();
    });
</script>

</body></html>