<!DOCTYPE html>
<html class="dark" lang="en">
<head>
  <meta charset="utf-8"/>
  <meta content="width=device-width, initial-scale=1.0" name="viewport"/>
  <title>Dashboard - API Rate Limiter</title>
  <link href="https://fonts.googleapis.com" rel="preconnect"/>
  <link crossorigin="" href="https://fonts.gstatic.com" rel="preconnect"/>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700&display=swap" rel="stylesheet"/>
  <link href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined" rel="stylesheet"/>
  <script src="https://cdn.tailwindcss.com?plugins=forms,container-queries"></script>
  <script>
    tailwind.config = {
      darkMode: "class",
      theme: {
        extend: {
          colors: {
            primary: "#0c5fe4",
            "background-light": "#f5f7f8",
            "background-dark": "#101722",
          },
          fontFamily: {
            display: ["Inter"],
          },
          borderRadius: {
            DEFAULT: "0.25rem",
            lg: "0.5rem",
            xl: "0.75rem",
            full: "9999px",
          },
        },
      },
    };
  </script>
  <style>
    body {
      min-height: max(884px, 100dvh);
    }
  </style>
</head>
<body class="bg-background-light dark:bg-background-dark font-display">
  <div class="flex flex-col min-h-screen">
    {{> header}}
    <main class="flex-grow">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <!-- Page Header -->
        <div class="mb-8">
          <h1 class="text-3xl font-bold text-gray-900 dark:text-white">Dashboard</h1>
          <p class="mt-2 text-gray-600 dark:text-gray-400">Monitor your API usage and performance</p>
        </div>
        <div class="grid grid-cols-1 gap-6 sm:grid-cols-2 xl:grid-cols-4">
          <div class="rounded-xl border border-black/10 bg-white p-6 dark:border-white/10 dark:bg-black/20">
            <p class="text-sm font-medium text-black/60 dark:text-white/60">Total Requests</p>
            <p class="mt-2 text-3xl font-bold text-black dark:text-white" id="totalRequests">{{dashboardData.totalRequests}}</p>
            <p class="mt-1 text-sm font-medium {{#if dashboardData.requestsTrend.direction}}{{#eq dashboardData.requestsTrend.direction 'up'}}text-green-500{{/eq}}{{#eq dashboardData.requestsTrend.direction 'down'}}text-red-500{{/eq}}{{#eq dashboardData.requestsTrend.direction 'stable'}}text-gray-500{{/eq}}{{/if}}" id="requestsTrend">
              {{#if dashboardData.requestsTrend.direction}}
                {{#eq dashboardData.requestsTrend.direction 'up'}}+{{/eq}}{{#eq dashboardData.requestsTrend.direction 'down'}}-{{/eq}}{{dashboardData.requestsTrend.percentage}}%
              {{else}}
                --
              {{/if}}
            </p>
          </div>
          <div class="rounded-xl border border-black/10 bg-white p-6 dark:border-white/10 dark:bg-black/20">
            <p class="text-sm font-medium text-black/60 dark:text-white/60">Success Rate</p>
            <p class="mt-2 text-3xl font-bold text-black dark:text-white" id="successRate">{{dashboardData.successRate}}%</p>
            <p class="mt-1 text-sm font-medium text-gray-500" id="successfulCount">{{dashboardData.successfulRequests}} successful</p>
          </div>
          <div class="rounded-xl border border-black/10 bg-white p-6 dark:border-white/10 dark:bg-black/20">
            <p class="text-sm font-medium text-black/60 dark:text-white/60">API Keys</p>
            <p class="mt-2 text-3xl font-bold text-black dark:text-white" id="totalApiKeys">{{dashboardData.totalApiKeys}}</p>
            <p class="mt-1 text-sm font-medium text-gray-500" id="activeApiKeys">{{dashboardData.activeApiKeys}} active</p>
          </div>
          <div class="rounded-xl border border-black/10 bg-white p-6 dark:border-white/10 dark:bg-black/20">
            <p class="text-sm font-medium text-black/60 dark:text-white/60">Failure Rate</p>
            <p class="mt-2 text-3xl font-bold text-black dark:text-white" id="failureRate">0%</p>
            <p class="mt-1 text-sm font-medium text-gray-500" id="failedCount">{{dashboardData.failedRequests}} failed</p>
          </div>
        </div>
        <div class="mt-8 rounded-xl border border-black/10 bg-white p-6 dark:border-white/10 dark:bg-black/20">
          <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between">
            <div>
              <p class="text-sm font-medium text-black/60 dark:text-white/60">Requests Over Time</p>
              <p class="mt-2 text-3xl font-bold text-black dark:text-white" id="chartTotalRequests">{{dashboardData.totalRequests}}</p>
              <div class="mt-1 flex items-center gap-2">
                <p class="text-sm text-black/60 dark:text-white/60">Last 7 Days</p>
                <p class="text-sm font-medium text-gray-500" id="chartAverage">{{dashboardData.avgRequestsPerDay}} avg/day</p>
              </div>
            </div>
          </div>
          <div class="mt-6 h-48" id="chartContainer">
            <!-- Chart will be dynamically generated based on dashboardData.dailyData -->
            <canvas id="requestsChart" width="472" height="150"></canvas>
          </div>
          <div class="mt-4 flex justify-around" id="chartLabels">
            {{#each dashboardData.dailyData}}
            <p class="text-xs font-bold text-black/60 dark:text-white/60">{{formatDate this.date}}</p>
            {{/each}}
          </div>
        </div>
        <div class="mt-8 grid grid-cols-1 gap-8 lg:grid-cols-3">
          <div class="lg:col-span-2">
            <h2 class="text-lg font-bold text-black dark:text-white">Analytics Summary</h2>
            <div class="mt-4 grid grid-cols-1 md:grid-cols-2 gap-4">
              <!-- Success Metrics -->
              <div class="rounded-xl border border-black/10 bg-white p-6 dark:border-white/10 dark:bg-black/20">
                <div class="flex items-center gap-3 mb-4">
                  <div class="w-10 h-10 bg-green-100 dark:bg-green-900/30 rounded-lg flex items-center justify-center">
                    <span class="material-symbols-outlined text-green-600 dark:text-green-400">check_circle</span>
                  </div>
                  <div>
                    <h3 class="font-semibold text-black dark:text-white">Successful Requests</h3>
                    <p class="text-sm text-black/60 dark:text-white/60">Last 7 days</p>
                  </div>
                </div>
                <div class="space-y-2">
                  <div class="flex justify-between">
                    <span class="text-sm text-black/60 dark:text-white/60">Total</span>
                    <span class="font-medium text-black dark:text-white">{{dashboardData.successfulRequests}}</span>
                  </div>
                  <div class="flex justify-between">
                    <span class="text-sm text-black/60 dark:text-white/60">Success Rate</span>
                    <span class="font-medium text-green-600 dark:text-green-400">{{dashboardData.successRate}}%</span>
                  </div>
                  <div class="flex justify-between">
                    <span class="text-sm text-black/60 dark:text-white/60">Avg/Day</span>
                    <span class="font-medium text-black dark:text-white">{{dashboardData.avgRequestsPerDay}}</span>
                  </div>
                </div>
              </div>

              <!-- Error Metrics -->
              <div class="rounded-xl border border-black/10 bg-white p-6 dark:border-white/10 dark:bg-black/20">
                <div class="flex items-center gap-3 mb-4">
                  <div class="w-10 h-10 bg-red-100 dark:bg-red-900/30 rounded-lg flex items-center justify-center">
                    <span class="material-symbols-outlined text-red-600 dark:text-red-400">error</span>
                  </div>
                  <div>
                    <h3 class="font-semibold text-black dark:text-white">Failed Requests</h3>
                    <p class="text-sm text-black/60 dark:text-white/60">Last 7 days</p>
                  </div>
                </div>
                <div class="space-y-2">
                  <div class="flex justify-between">
                    <span class="text-sm text-black/60 dark:text-white/60">Failed</span>
                    <span class="font-medium text-black dark:text-white">{{dashboardData.failedRequests}}</span>
                  </div>
                  <div class="flex justify-between">
                    <span class="text-sm text-black/60 dark:text-white/60">Rate Limited</span>
                    <span class="font-medium text-yellow-600 dark:text-yellow-400">{{dashboardData.rateLimitedRequests}}</span>
                  </div>
                  <div class="flex justify-between">
                    <span class="text-sm text-black/60 dark:text-white/60">Error Rate</span>
                    <span class="font-medium text-red-600 dark:text-red-400" id="errorRateDisplay">{{dashboardData.errorRate}}%</span>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div class="space-y-8">
            <div>
              <h2 class="text-lg font-bold text-black dark:text-white">Rate Limit Status</h2>
              <div class="mt-4 rounded-xl border border-black/10 bg-white p-6 dark:border-white/10 dark:bg-black/20" id="rateLimitStatus">
                <div class="flex items-center justify-between text-sm">
                  <p class="font-medium text-black/60 dark:text-white/60">Requests</p>
                  <p class="font-medium text-black dark:text-white" id="rateLimitText">Loading...</p>
                </div>
                <div class="mt-2 h-2 rounded-full bg-primary/20 dark:bg-primary/30">
                  <div class="h-2 rounded-full bg-primary" id="rateLimitBar" style="width: 0%;"></div>
                </div>
                <div class="mt-2 text-xs text-black/60 dark:text-white/60" id="rateLimitReset">Reset time: Loading...</div>
              </div>
            </div>
            <div>
              <h2 class="text-lg font-bold text-black dark:text-white">Quick Actions</h2>
              <div class="mt-4 space-y-3">
                <a href="/keys" class="flex w-full items-center justify-center rounded-lg bg-primary px-4 py-3 text-sm font-bold text-white shadow-sm transition hover:bg-primary/90">
                  <span class="material-symbols-outlined mr-2 text-lg">key</span>
                  Manage API Keys
                </a>
                <a href="/documentation" class="flex w-full items-center justify-center rounded-lg bg-primary/10 px-4 py-3 text-sm font-bold text-primary shadow-sm transition hover:bg-primary/20 dark:bg-primary/20 dark:hover:bg-primary/30">
                  <span class="material-symbols-outlined mr-2 text-lg">description</span>
                  View Documentation
                </a>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    </main>
  </div>

  <script>
    let dashboardData = {{{json dashboardData}}};
    let isRefreshing = false;

    // Initialize dashboard
    document.addEventListener('DOMContentLoaded', function() {
      initializeChart();
      loadRateLimitStatus();
      updateFailureRate();
      
      // Setup logout buttons
      setupLogoutButtons();
      
      // Refresh data every 30 seconds (but prevent overlapping requests)
      setInterval(() => {
        if (!isRefreshing) {
          refreshDashboardData();
        }
      }, 30000);
    });

    // Update failure rate calculation
    function updateFailureRate() {
      const successRate = dashboardData.successRate || 0;
      const failureRate = Math.max(0, 100 - successRate);
      document.getElementById('failureRate').textContent = `${failureRate}%`;
    }

    // Setup logout buttons
    function setupLogoutButtons() {
      const logoutButtons = document.querySelectorAll('[data-action="logout"]');
      logoutButtons.forEach(button => {
        button.addEventListener('click', logout);
      });
    }

    // Logout function
    function logout() {
      window.location.href = '/auth/logout';
    }

    // Initialize the requests chart
    function initializeChart() {
      const canvas = document.getElementById('requestsChart');
      const ctx = canvas.getContext('2d');
      
      if (!dashboardData.dailyData || dashboardData.dailyData.length === 0) {
        // Draw empty state
        ctx.fillStyle = '#6b7280';
        ctx.font = '14px Inter';
        ctx.textAlign = 'center';
        ctx.fillText('No data available', canvas.width / 2, canvas.height / 2);
        return;
      }

      // Clear canvas
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      
      const data = dashboardData.dailyData;
      const maxValue = Math.max(...data.map(d => d.totalCalls)) || 1;
      const padding = 40;
      const chartWidth = canvas.width - (padding * 2);
      const chartHeight = canvas.height - (padding * 2);
      
      // Draw chart area
      ctx.strokeStyle = '#e5e7eb';
      ctx.lineWidth = 1;
      ctx.strokeRect(padding, padding, chartWidth, chartHeight);
      
      // Draw data points and lines
      if (data.length > 1) {
        ctx.beginPath();
        ctx.strokeStyle = '#0c5fe4';
        ctx.lineWidth = 2;
        
        data.forEach((point, index) => {
          const x = padding + (index / (data.length - 1)) * chartWidth;
          const y = padding + chartHeight - (point.totalCalls / maxValue) * chartHeight;
          
          if (index === 0) {
            ctx.moveTo(x, y);
          } else {
            ctx.lineTo(x, y);
          }
          
          // Draw point
          ctx.fillStyle = '#0c5fe4';
          ctx.beginPath();
          ctx.arc(x, y, 3, 0, 2 * Math.PI);
          ctx.fill();
        });
        
        ctx.stroke();
      }
    }

    // Load rate limit status
    async function loadRateLimitStatus() {
      try {
        const response = await fetch('/dashboard/api/rate-limit-status');
        if (response.ok) {
          const rateLimitData = await response.json();
          updateRateLimitDisplay(rateLimitData);
        }
      } catch (error) {
        console.error('Error loading rate limit status:', error);
        document.getElementById('rateLimitText').textContent = 'Error loading data';
      }
    }

    // Update rate limit display
    function updateRateLimitDisplay(data) {
      document.getElementById('rateLimitText').textContent = `${data.current} / ${data.limit}`;
      document.getElementById('rateLimitBar').style.width = `${data.percentage}%`;
      
      const resetTime = new Date(data.resetTime).toLocaleTimeString();
      document.getElementById('rateLimitReset').textContent = `Resets at: ${resetTime}`;
    }



    // Refresh dashboard data (with debouncing to prevent duplicate requests)
    async function refreshDashboardData() {
      if (isRefreshing) {
        return;
      }
      
      isRefreshing = true;
      
      try {
        // Fetch both dashboard data and rate limit status in parallel
        const [dashboardResponse, rateLimitResponse] = await Promise.all([
          fetch('/dashboard/api/dashboard-data'),
          fetch('/dashboard/api/rate-limit-status')
        ]);

        if (dashboardResponse.ok) {
          const newData = await dashboardResponse.json();
          dashboardData = newData;
          updateDashboardDisplay(newData);
        }

        if (rateLimitResponse.ok) {
          const rateLimitData = await rateLimitResponse.json();
          updateRateLimitDisplay(rateLimitData);
        }
      } catch (error) {
        console.error('Error refreshing dashboard data:', error);
      } finally {
        isRefreshing = false;
      }
    }

    // Update dashboard display with new data
    function updateDashboardDisplay(data) {
      // Update metrics
      document.getElementById('totalRequests').textContent = data.totalRequests.toLocaleString();
      document.getElementById('successRate').textContent = `${data.successRate}%`;
      document.getElementById('totalApiKeys').textContent = data.totalApiKeys;
      document.getElementById('activeApiKeys').textContent = `${data.activeApiKeys} active`;
      
      // Calculate and update failure rate
      const failureRate = Math.max(0, 100 - (data.successRate || 0));
      document.getElementById('failureRate').textContent = `${failureRate}%`;
      
      document.getElementById('successfulCount').textContent = `${data.successfulRequests} successful`;
      document.getElementById('failedCount').textContent = `${data.failedRequests} failed`;
      document.getElementById('errorRateDisplay').textContent = `${data.errorRate}%`;
      
      // Update trend
      const trendElement = document.getElementById('requestsTrend');
      if (data.requestsTrend && data.requestsTrend.direction !== 'stable') {
        const sign = data.requestsTrend.direction === 'up' ? '+' : '-';
        trendElement.textContent = `${sign}${data.requestsTrend.percentage}%`;
        trendElement.className = `mt-1 text-sm font-medium ${data.requestsTrend.direction === 'up' ? 'text-green-500' : 'text-red-500'}`;
      } else {
        trendElement.textContent = '--';
        trendElement.className = 'mt-1 text-sm font-medium text-gray-500';
      }
      
      // Update chart
      initializeChart();
    }
  </script>

  <script src="/js/navigation.js"></script>
</body>
</html>